var EventEmitter = require('events').EventEmitter
var taskArray = new Array()
var taskIndex = 0;

function TaskManager() {
}

TaskManager.prototype = new EventEmitter()

getWaitTask = function() {
  for (var i = 0; i < taskArray.length; i++) {
    if (taskArray[i].state == "wait") {
      return taskArray[i]
    }
  }
  return null
}

TaskManager.prototype.addTask = function(func, args) {
  var task = {
    id: taskIndex++,
    func: func.toString(), // ただ文字化するだけではなく最適化すると良い
    args: args,
    state: "wait"
  }
  taskArray.push(task)
}

TaskManager.prototype.getTask = function(callback) {
  var task = getWaitTask() 
  if (task != null) {
    callback(task)
  } else {
    console.log('task is empty')
    this.emit('done', 'done')
  }
}

TaskManager.prototype.setResult = function(result) {
  for (var i = 0; i < taskArray.length; i++) {
    if (taskArray[i].id == result.id) {
      taskArray[i].result = result.result
      taskArray[i].state = "done"
    }
  }
}

function countWaitTask() {
  var waitTaskCount = 0
  for (var i = 0; i < taskArray.length; i++) {
    if (taskArray[i].state == "wait") {
      waitTaskCount++
    }
  }
  return waitTaskCount 
}

TaskManager.prototype.getTaskProgress = function() {
  return (taskArray.length - countWaitTask()) / taskArray.length
}

module.exports = TaskManager 
